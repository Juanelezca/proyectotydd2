// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/06/2023 16:49:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    control_tiempo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module control_tiempo_vlg_sample_tst(
	clock,
	R2,
	reset_A,
	S,
	sampler_tx
);
input  clock;
input  R2;
input  reset_A;
input  S;
output sampler_tx;

reg sample;
time current_time;
always @(clock or R2 or reset_A or S)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module control_tiempo_vlg_check_tst (
	contador,
	Resultado,
	stop_and_go,
	sampler_rx
);
input  contador;
input  Resultado;
input  stop_and_go;
input sampler_rx;

reg  contador_expected;
reg  Resultado_expected;
reg  stop_and_go_expected;

reg  contador_prev;
reg  Resultado_prev;
reg  stop_and_go_prev;

reg  contador_expected_prev;
reg  Resultado_expected_prev;
reg  stop_and_go_expected_prev;

reg  last_contador_exp;
reg  last_Resultado_exp;
reg  last_stop_and_go_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	contador_prev = contador;
	Resultado_prev = Resultado;
	stop_and_go_prev = stop_and_go;
end

// update expected /o prevs

always @(trigger)
begin
	contador_expected_prev = contador_expected;
	Resultado_expected_prev = Resultado_expected;
	stop_and_go_expected_prev = stop_and_go_expected;
end



// expected contador
initial
begin
	contador_expected = 1'bX;
end 

// expected Resultado
initial
begin
	Resultado_expected = 1'bX;
end 

// expected stop_and_go
initial
begin
	stop_and_go_expected = 1'bX;
end 
// generate trigger
always @(contador_expected or contador or Resultado_expected or Resultado or stop_and_go_expected or stop_and_go)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected contador = %b | expected Resultado = %b | expected stop_and_go = %b | ",contador_expected_prev,Resultado_expected_prev,stop_and_go_expected_prev);
	$display("| real contador = %b | real Resultado = %b | real stop_and_go = %b | ",contador_prev,Resultado_prev,stop_and_go_prev);
`endif
	if (
		( contador_expected_prev !== 1'bx ) && ( contador_prev !== contador_expected_prev )
		&& ((contador_expected_prev !== last_contador_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_expected_prev);
		$display ("     Real value = %b", contador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_exp = contador_expected_prev;
	end
	if (
		( Resultado_expected_prev !== 1'bx ) && ( Resultado_prev !== Resultado_expected_prev )
		&& ((Resultado_expected_prev !== last_Resultado_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultado :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultado_expected_prev);
		$display ("     Real value = %b", Resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Resultado_exp = Resultado_expected_prev;
	end
	if (
		( stop_and_go_expected_prev !== 1'bx ) && ( stop_and_go_prev !== stop_and_go_expected_prev )
		&& ((stop_and_go_expected_prev !== last_stop_and_go_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stop_and_go :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stop_and_go_expected_prev);
		$display ("     Real value = %b", stop_and_go_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_stop_and_go_exp = stop_and_go_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module control_tiempo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg R2;
reg reset_A;
reg S;
// wires                                               
wire contador;
wire Resultado;
wire stop_and_go;

wire sampler;                             

// assign statements (if any)                          
control_tiempo i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.contador(contador),
	.R2(R2),
	.reset_A(reset_A),
	.Resultado(Resultado),
	.S(S),
	.stop_and_go(stop_and_go)
);

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// R2
initial
begin
	R2 = 1'b0;
	R2 = #20000 1'b1;
	R2 = #20000 1'b0;
end 

// reset_A
initial
begin
	reset_A = 1'b1;
end 

// S
initial
begin
	S = 1'b1;
	S = #60000 1'b0;
	S = #40000 1'b1;
	S = #150000 1'b0;
	S = #40000 1'b1;
	S = #90000 1'b0;
	S = #40000 1'b1;
	S = #90000 1'b0;
	S = #60000 1'b1;
end 

control_tiempo_vlg_sample_tst tb_sample (
	.clock(clock),
	.R2(R2),
	.reset_A(reset_A),
	.S(S),
	.sampler_tx(sampler)
);

control_tiempo_vlg_check_tst tb_out(
	.contador(contador),
	.Resultado(Resultado),
	.stop_and_go(stop_and_go),
	.sampler_rx(sampler)
);
endmodule

